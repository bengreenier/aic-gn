# AIC SDK C++ wrapper build configuration
# This file downloads the C SDK binaries and creates targets for linking

import("//build/config/sysroot.gni")

# Platform detection for AIC SDK
if (is_win) {
  if (target_cpu == "x64") {
    aic_platform = "x86_64-pc-windows-msvc"
  } else {
    assert(false, "Unsupported Windows architecture: " + target_cpu)
  }
} else if (is_mac) {
  if (target_cpu == "arm64") {
    aic_platform = "aarch64-apple-darwin"
  } else if (target_cpu == "x64") {
    aic_platform = "x86_64-apple-darwin"
  } else {
    assert(false, "Unsupported macOS architecture: " + target_cpu)
  }
} else if (is_linux) {
  if (target_cpu == "arm64") {
    aic_platform = "aarch64-unknown-linux-gnu"
  } else if (target_cpu == "x64") {
    aic_platform = "x86_64-unknown-linux-gnu"
  } else {
    assert(false, "Unsupported Linux architecture: " + target_cpu)
  }
} else {
  assert(false, "Unsupported platform")
}

# AIC SDK version
aic_version = "0.7.0"
aic_gn_dir = rebase_path("./", root_build_dir)
aic_versions_file = "$aic_gn_dir/VERSIONS.txt"

# Determine library file paths based on platform
if (is_win) {
  aic_lib_file_original = "$target_gen_dir/lib/aic.lib"
  aic_lib_file_renamed = "$target_gen_dir/lib/aic_renamed.lib"
} else if (is_mac) {
  aic_lib_file_original = "$target_gen_dir/lib/libaic.a"
  aic_lib_file_renamed = "$target_gen_dir/lib/libaic_renamed.a"
} else if (is_linux) {
  aic_lib_file_original = "$target_gen_dir/lib/libaic.a"
  aic_lib_file_renamed = "$target_gen_dir/lib/libaic_renamed.a"
}

# Action to download and extract the C SDK
action("download_aic_sdk") {
  script = "build/download_c_libaries.py"
  
  args = [
    aic_version,
    "--output", rebase_path(target_gen_dir, root_build_dir),
    "--platform", aic_platform,
    "--versions-file",  aic_versions_file,
  ]
  
  outputs = [
    aic_lib_file_original,
  ]
  
  # Make sure the script is executable
  deps = []
}

# Action to rename Rust symbols in the library to prevent conflicts
# This renames symbols like "rust_eh_personality" to "aic_rust_eh_personality"
action("rename_rust_symbols") {
  script = "build/rename_rust_symbols.py"
  
  deps = [ ":download_aic_sdk" ]
  
  args = [
    rebase_path(aic_lib_file_original, root_build_dir),
    rebase_path(aic_lib_file_renamed, root_build_dir),
    "--prefix", "aic_",
  ]
  
  inputs = [
    aic_lib_file_original,
  ]
  
  outputs = [
    aic_lib_file_renamed,
  ]
}

# Source set for the C SDK (headers and library)
source_set("aic_c_sdk") {
  deps = [ ":rename_rust_symbols" ]
  
  public_configs = [ ":aic_c_config" ]
  
  # Include the C headers
  public_deps = [ ":aic_c_headers" ]
  
  # Link against the renamed static library (with prefixed Rust symbols)
  libs = [ aic_lib_file_renamed ]
  
  # Add required system libraries
  if (is_mac) {
    frameworks = [ "CoreFoundation" ]
  } else if (is_win) {
    libs += [ "ntdll" ]
  }
}

# Configuration for C SDK headers
config("aic_c_config") {
  include_dirs = [ "$aic_gn_dir/third_party/aic-sdk-c/include" ]
}

# Headers-only target for C SDK
source_set("aic_c_headers") {
  deps = [ ":download_aic_sdk" ]
  
  sources = [
    "$aic_gn_dir/third_party/aic-sdk-c/include/aic.h",
  ]
  
  public_configs = [ ":aic_c_config" ]
}

# C++ wrapper library
source_set("aic_sdk") {
  deps = [
    ":aic_c_sdk",
    ":aic_cpp_headers",
  ]
  
  public_configs = [ ":aic_cpp_config" ]
}

# Configuration for C++ wrapper
config("aic_cpp_config") {
  include_dirs = [  "$aic_gn_dir/third_party/aic-sdk-cpp/include" ]
}

# C++ headers-only target
source_set("aic_cpp_headers") {
  sources = [
     "$aic_gn_dir/third_party/aic-sdk-c/include/aic.hpp"
  ]
  
  public_configs = [ ":aic_cpp_config" ]
}
